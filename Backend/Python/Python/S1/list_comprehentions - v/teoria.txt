Introdução

Comprehensions em Python são uma forma concisa de criar listas, dicionários e conjuntos. 
Elas fornecem uma maneira de realizar loop e transformação de elementos em uma única linha de código, 
ao invés de escrever várias linhas de código para fazer a mesma coisa.
List Comprehension

O list comprehension é um loop for em uma única linha, onde a expressão armazenará os valores. 
Aqui estão alguns exemplos de comprehensions em Python:


# Sem List comprehension
numbers = [1, 2, 3, 4, 5]
squares = []
for n in numbers:
    squares.append(n**2) # elevando ao quadrado
print(squares) # Output: [1, 4, 9, 16, 25]

# Com List comprehension
numbers = [1, 2, 3, 4, 5]
squares = [n**2 for n in numbers]
print(squares)  # [1, 4, 9, 16, 25]




Condicionais com list comprehension


Para fazermos uma condicional ou filtragem com comprehension temos duas formas, 
uma mais simples que envolve apenas uma condicional, e outra mais robusta para encorpar uma 
condicional com um else. Vamos ver o seguinte exemplo, filtrando os valores múltiplos pares:




# Sem List comprehension
numbers = [1, 2, 3, 4, 5]
evens = []
for n in numbers:
    if n % 2 == 0:
        evens.append(n)
print(evens) # [2, 4]

# Com List comprehension
numbers = [1, 2, 3, 4, 5]
evens = [n for n in numbers if n % 2 == 0]
print(evens) # [2, 4]



Dict Comprehension


Dict comprehension, assim como o list comprehension, se baseia na compressão de dicionários. 
Podemos deixar nosso código mais enxuto e preservar a lógica, além de deixá-lo mais pythonico. 
O dict comprehension foi introduzido a partir da PEP 274:


# Exemplo dicionário que vamos construir
# {0: 'Brasil', 1: 'Argentina', 2: 'Chile'}
lista = ['Brasil', 'Argentina', 'Chile']

novo_dict_comprehension = {indice:pais for indice, pais in enumerate(lista)}
print(novo_dict_comprehension)
# {0: 'Brasil', 1: 'Argentina', 2: 'Chile'}




