Hoisting 

*VARIABLES*

console.log(name) // O valor da variável torna-se UNDEFINED. 
console.log(sexo) // Apresenta erro ao tentar ler variável antes da declaração
console.log(apelido) // Apresenta erro ao tentar ler variável antes da declaração

let sexo = "masculino";
const apelido = "Cleitinho"
var name = "cleiton";

------------------------------------------------------------------------------------------------


*HOISTING WITH FUNCTIONS* 




showname() // Execultada normalmente
showPhrase() // Apresenta erro ao tentar ler variável antes da declaração
showAddress() // Apresenta erro ao tentar ler variável antes da declaração

function showname() {
  console.log("Meu nome é Fred")
}


const showPhrase = () => {
  console.log("Hello World!")
}


let showAddress = function(){
  console.log("Av Amazonas")
}



------------------------------------------------------------------------------------------------

Funções são FIRST CLASS OBJECT ( Objetos de primeira classe ), significa que as funções são tratadas como dado


Funções podem receber outras funções como parâmetro. 
Exemplo abaixo: 

function showWord(name){
  console.log(`Hello world! ${name}`);
};


const executaFuncao = (fn) => {
  fn("Cleiton")
} 

executaFuncao(showWord)



------------------------------------------------------------------------------------------------

const pessoa = {
  name: function(){
    console.log("Hello world")  
  },
  
  
  sexo(){
    console.log("Masculino")
  }

}



pessoa.name() // Essa função é o valor da chave NAME no objeto
pessoa.sexo() // Essa função nãpo possue chave, foi declarada diretamente no objeto. 





------------------------------------------------------------------------------------------------
PARAMETROS DA FUNÇÃO
** Nenhum parâmetro foi passado para a função, porém foi possível passar argumentos, utuilizando o "arguments". **
É possível iterar sobre eles. [ OBS. Somente quando declaramos a função com a palavra FUNCTION] 



function x (){
  
  let total = 0
  for (let arg of arguments){
    total+=arg 
     console.log(total)
  }
}



x(1,2,3,4,5,6,7)
x("C", "L", "E", "I", "T", "O", "N")



**



function paramClass(a,b = 2,c = 4){
  console.log(a,b,c)
  console.log(arguments)
}

paramClass() // Se não passo nenhum parametro, o dado deles vem como undefined. 

paramClass(1,2,3,4,5,6) // Se passo mais argumentos que preciso, ele os desconsidera 

paramClass(10,undefined,10) // se eu quiser pular um parâmetro, posso utilizar o undefined. 

//OBS. Caso eu passe mais argumentos que parâmetros, o JS irá armazenar ambos no objeto arguments



**
**


Desestruturando parâmetros na função

function fn([valor1, valor2, valor3]){
  console.log(valor1,  valor2, valor3)
}
fn([23, 10, 34])





O rest operator ( ... ) vai inserir elementos específicos no parêtro da fn em um array (deve ser o último parametro da função)

function conta(operador, acumulador, ...numeros){
  console.log(operador, acumulador, numeros)
}

conta("+", 0, 30, 40, 60)






------------------------------------------------------------------------------------------------







